// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: passwords.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createPassword = `-- name: CreatePassword :one
INSERT INTO passwords (
    user_id,
    username,
    password,
    url,
    notes,
    icon
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, url, notes, icon, created_at, updated_at
`

type CreatePasswordParams struct {
	UserID   int64
	Username string
	Password string
	Url      string
	Notes    sql.NullString
	Icon     sql.NullString
}

type CreatePasswordRow struct {
	ID        int64
	UserID    int64
	Url       string
	Notes     sql.NullString
	Icon      sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePassword(ctx context.Context, arg CreatePasswordParams) (CreatePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, createPassword,
		arg.UserID,
		arg.Username,
		arg.Password,
		arg.Url,
		arg.Notes,
		arg.Icon,
	)
	var i CreatePasswordRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Notes,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePassword = `-- name: DeletePassword :one
DELETE FROM passwords
WHERE id = $1
    AND user_id = $2
RETURNING id, user_id, url, notes, icon, created_at, updated_at
`

type DeletePasswordParams struct {
	ID     int64
	UserID int64
}

type DeletePasswordRow struct {
	ID        int64
	UserID    int64
	Url       string
	Notes     sql.NullString
	Icon      sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) DeletePassword(ctx context.Context, arg DeletePasswordParams) (DeletePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, deletePassword, arg.ID, arg.UserID)
	var i DeletePasswordRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Notes,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPasswordByID = `-- name: GetPasswordByID :one
SELECT id, user_id, username, password, url, notes, icon, created_at, updated_at FROM passwords
WHERE id = $1
    AND user_id = $2
LIMIT 1
`

type GetPasswordByIDParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetPasswordByID(ctx context.Context, arg GetPasswordByIDParams) (Password, error) {
	row := q.db.QueryRowContext(ctx, getPasswordByID, arg.ID, arg.UserID)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Url,
		&i.Notes,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPasswords = `-- name: ListPasswords :many
SELECT id, user_id, url, notes, icon, created_at, updated_at
FROM passwords
WHERE user_id = $1
  AND (
    $2::text IS NULL OR username ILIKE '%' || $2 || '%'
    OR url ILIKE '%' || $2 || '%'
    OR notes ILIKE '%' || $2 || '%'
  )
  AND (
    $3::text IS NULL
    OR url ~* ('(https?://)?([^/]*\.)?' || $3)
  )
ORDER BY created_at DESC
`

type ListPasswordsParams struct {
	UserID int64
	Search string
	Filter string
}

type ListPasswordsRow struct {
	ID        int64
	UserID    int64
	Url       string
	Notes     sql.NullString
	Icon      sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListPasswords(ctx context.Context, arg ListPasswordsParams) ([]ListPasswordsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPasswords, arg.UserID, arg.Search, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPasswordsRow
	for rows.Next() {
		var i ListPasswordsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Notes,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE passwords
SET 
    username = $3,
    password = $4,
    url = $5,
    notes = $6,
    icon = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
  AND user_id = $2
RETURNING id, user_id, url, notes, icon, created_at, updated_at
`

type UpdatePasswordParams struct {
	ID       int64
	UserID   int64
	Username string
	Password string
	Url      string
	Notes    sql.NullString
	Icon     sql.NullString
}

type UpdatePasswordRow struct {
	ID        int64
	UserID    int64
	Url       string
	Notes     sql.NullString
	Icon      sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UpdatePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, updatePassword,
		arg.ID,
		arg.UserID,
		arg.Username,
		arg.Password,
		arg.Url,
		arg.Notes,
		arg.Icon,
	)
	var i UpdatePasswordRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Notes,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
